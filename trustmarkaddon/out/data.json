{
    "project": {},
    "files": {
        "data/policy.js": {
            "name": "data/policy.js",
            "modules": {
                "policy": 1
            },
            "classes": {
                "policy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "data/settings.js": {
            "name": "data/settings.js",
            "modules": {
                "settingstooltip": 1
            },
            "classes": {
                "settingstooltip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "data/sidebar.js": {
            "name": "data/sidebar.js",
            "modules": {
                "sidebar": 1
            },
            "classes": {
                "sidebar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "data/test.js": {
            "name": "data/test.js",
            "modules": {
                "test": 1
            },
            "classes": {
                "tipevaluator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/main.js": {
            "name": "lib/main.js",
            "modules": {
                "main": 1
            },
            "classes": {
                "main": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/pageloadhandler.js": {
            "name": "lib/pageloadhandler.js",
            "modules": {
                "pageloadhandler": 1
            },
            "classes": {
                "pageloadhandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/panelviewer.js": {
            "name": "lib/panelviewer.js",
            "modules": {
                "panelviewer": 1
            },
            "classes": {
                "panelviewer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/trustmarkhelper.js": {
            "name": "lib/trustmarkhelper.js",
            "modules": {
                "trustmarkhelper": 1
            },
            "classes": {
                "trustmarkhelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/trustmarkpolicyhelper.js": {
            "name": "lib/trustmarkpolicyhelper.js",
            "modules": {
                "trustmarkpolicyhelper": 1
            },
            "classes": {
                "trustmarkpolicyhelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/trustmarkverifier.js": {
            "name": "lib/trustmarkverifier.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "policy": {
            "name": "policy",
            "submodules": {},
            "classes": {
                "policy": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "data/policy.js",
            "line": 9,
            "description": "Displays the settings in tabbed content"
        },
        "settingstooltip": {
            "name": "settingstooltip",
            "submodules": {},
            "classes": {
                "settingstooltip": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "data/settings.js",
            "line": 6,
            "description": "Show Tool TIP for settings"
        },
        "sidebar": {
            "name": "sidebar",
            "submodules": {},
            "classes": {
                "sidebar": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "data/sidebar.js",
            "line": 6,
            "description": "Trustmarks Sidebar"
        },
        "test": {
            "name": "test",
            "submodules": {},
            "classes": {
                "tipevaluator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "data/test.js",
            "line": 6,
            "description": "TIP evaluator for trustmark panel"
        },
        "main": {
            "name": "main",
            "submodules": {},
            "classes": {
                "main": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/main.js",
            "line": 6,
            "description": "This module contains the initialization code for the addon"
        },
        "pageloadhandler": {
            "name": "pageloadhandler",
            "submodules": {},
            "classes": {
                "pageloadhandler": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/pageloadhandler.js",
            "line": 6,
            "description": "Handles the download of trustmarks and invocation of TIP evaluation upon webpage load."
        },
        "panelviewer": {
            "name": "panelviewer",
            "submodules": {},
            "classes": {
                "panelviewer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/panelviewer.js",
            "line": 6,
            "description": "This module is responsible for rendering the trustmark addon panel"
        },
        "trustmarkhelper": {
            "name": "trustmarkhelper",
            "submodules": {},
            "classes": {
                "trustmarkhelper": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/trustmarkhelper.js",
            "line": 9,
            "description": "Handles the trustmark, trustmark definitions operations"
        },
        "trustmarkpolicyhelper": {
            "name": "trustmarkpolicyhelper",
            "submodules": {},
            "classes": {
                "trustmarkpolicyhelper": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 6,
            "description": "Handles the trust interoperability profile operations for the trustmark addon"
        }
    },
    "classes": {
        "policy": {
            "name": "policy",
            "shortname": "policy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "policy",
            "namespace": "",
            "file": "data/policy.js",
            "line": 9,
            "description": "Displays Create/View/Apply Policy Settings in tabbed content"
        },
        "settingstooltip": {
            "name": "settingstooltip",
            "shortname": "settingstooltip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "settingstooltip",
            "namespace": "",
            "file": "data/settings.js",
            "line": 6,
            "description": "Displays the settings icon tooltip in the panel"
        },
        "sidebar": {
            "name": "sidebar",
            "shortname": "sidebar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sidebar",
            "namespace": "",
            "file": "data/sidebar.js",
            "line": 6,
            "description": "1. Displays the trustmarks received/not received by the website\n2. Displays the currently active policy"
        },
        "tipevaluator": {
            "name": "tipevaluator",
            "shortname": "tipevaluator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "test",
            "namespace": "",
            "file": "data/test.js",
            "line": 6,
            "description": "TIP Evaluator\n- Functions to display TIPs panel content\n- Displays the failed TIPs\n- Supports click on TIPs and sends message to panel to display TIP sidebar*"
        },
        "main": {
            "name": "main",
            "shortname": "main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "main",
            "namespace": "",
            "file": "lib/main.js",
            "line": 6,
            "description": "This module contains the initialization code for the addon"
        },
        "pageloadhandler": {
            "name": "pageloadhandler",
            "shortname": "pageloadhandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "pageloadhandler",
            "namespace": "",
            "file": "lib/pageloadhandler.js",
            "line": 6,
            "description": "Handles the download of trustmarks and invocation of TIP evaluation upon webpage load"
        },
        "panelviewer": {
            "name": "panelviewer",
            "shortname": "panelviewer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "panelviewer",
            "namespace": "",
            "file": "lib/panelviewer.js",
            "line": 6,
            "description": "This module is responsible for rendering the trustmark addon panel"
        },
        "trustmarkhelper": {
            "name": "trustmarkhelper",
            "shortname": "trustmarkhelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trustmarkhelper",
            "namespace": "",
            "file": "lib/trustmarkhelper.js",
            "line": 9,
            "description": "This module has functions that deal with trustmark load/store operations"
        },
        "trustmarkpolicyhelper": {
            "name": "trustmarkpolicyhelper",
            "shortname": "trustmarkpolicyhelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "trustmarkpolicyhelper",
            "namespace": "",
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 6,
            "description": "This module handles the trust interoperability profile operations for the trustmark addon"
        }
    },
    "classitems": [
        {
            "file": "data/policy.js",
            "line": 14,
            "description": "On Click Listener for Tabs",
            "itemtype": "method",
            "name": "onClickListener",
            "params": [
                {
                    "name": "event",
                    "description": "Mouse click event",
                    "type": "Event"
                }
            ],
            "class": "policy",
            "module": "policy"
        },
        {
            "file": "data/policy.js",
            "line": 44,
            "description": "Reset all tabs",
            "itemtype": "method",
            "name": "reset",
            "class": "policy",
            "module": "policy"
        },
        {
            "file": "data/settings.js",
            "line": 11,
            "description": "Show Settings Tool tip",
            "itemtype": "method",
            "name": "showToolTip",
            "class": "settingstooltip",
            "module": "settingstooltip"
        },
        {
            "file": "data/settings.js",
            "line": 21,
            "description": "Hide Settings Tool tip",
            "itemtype": "method",
            "name": "hideToolTip",
            "class": "settingstooltip",
            "module": "settingstooltip"
        },
        {
            "file": "data/sidebar.js",
            "line": 12,
            "description": "Check if string is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "str",
                    "description": "string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if string is empty"
            },
            "class": "sidebar",
            "module": "sidebar"
        },
        {
            "file": "data/sidebar.js",
            "line": 23,
            "description": "Get Trustmark Set",
            "itemtype": "method",
            "name": "getTrustmarkSet",
            "params": [
                {
                    "name": "trustmark_list",
                    "description": "Trustmark Set",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "sidebar",
            "module": "sidebar"
        },
        {
            "file": "data/sidebar.js",
            "line": 45,
            "description": "Get HTML TIP Expression",
            "itemtype": "method",
            "name": "getBeautifiedTIPExpr",
            "params": [
                {
                    "name": "tip_expr",
                    "description": "TIP trust expression",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "sidebar",
            "module": "sidebar"
        },
        {
            "file": "data/sidebar.js",
            "line": 69,
            "description": "Event Handler for 'trustmark' event",
            "itemtype": "event",
            "name": "trustmark",
            "params": [
                {
                    "name": "tip_trustmark_list",
                    "description": "TIP referenced trustmark definitions",
                    "type": "String"
                },
                {
                    "name": "recipient_trustmark_list",
                    "description": "Recipient trustmark definitions",
                    "type": "String"
                },
                {
                    "name": "tip_json",
                    "description": "TIP JSON string",
                    "type": "JSON"
                }
            ],
            "class": "sidebar",
            "module": "sidebar"
        },
        {
            "file": "data/sidebar.js",
            "line": 132,
            "description": "On MouseOver Listener for Tab",
            "itemtype": "method",
            "name": "onMouseOverListener",
            "return": {
                "description": "none"
            },
            "class": "sidebar",
            "module": "sidebar"
        },
        {
            "file": "data/sidebar.js",
            "line": 142,
            "description": "On mouseout listener for tab",
            "itemtype": "method",
            "name": "onMouseOutListener",
            "return": {
                "description": "none"
            },
            "class": "sidebar",
            "module": "sidebar"
        },
        {
            "file": "data/sidebar.js",
            "line": 155,
            "description": "On mouse click listener for tab",
            "itemtype": "method",
            "name": "onClickListener",
            "return": {
                "description": "none"
            },
            "class": "sidebar",
            "module": "sidebar"
        },
        {
            "file": "data/sidebar.js",
            "line": 202,
            "description": "Reset all sidebar tabs",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "none"
            },
            "class": "sidebar",
            "module": "sidebar"
        },
        {
            "file": "data/test.js",
            "line": 14,
            "description": "Display if Recipient has passed all privacy settings",
            "itemtype": "method",
            "name": "displayOverallPrinciplesPassed",
            "params": [
                {
                    "name": "recipient",
                    "description": "recipient",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 53,
            "description": "Event Handler for Failed TIP",
            "itemtype": "method",
            "name": "onFailedTIP",
            "params": [
                {
                    "name": "tip",
                    "description": "Failed TIP id",
                    "type": "String"
                },
                {
                    "name": "recipient",
                    "description": "site hostname (e.g. www.example.com)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 73,
            "description": "Event Handler for Passed TIPs",
            "itemtype": "method",
            "name": "onPassedTIP",
            "params": [
                {
                    "name": "tip",
                    "description": "Passed TIP ID",
                    "type": "String"
                },
                {
                    "name": "recipient",
                    "description": "site hostname (e.g. www.example.com)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 100,
            "description": "Mouse Over Listener for TIP",
            "itemtype": "method",
            "name": "onMouseOverListener",
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 111,
            "description": "Mouse Out Listener for TIP",
            "itemtype": "method",
            "name": "onMouseOutListener",
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 122,
            "description": "On Click Listener for TIP Settings",
            "itemtype": "method",
            "name": "onClickListenerForSettings",
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 133,
            "description": "On Click Listener for TIP",
            "itemtype": "method",
            "name": "onClickListener",
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 147,
            "description": "{\n\tdivelement.removeEventListener(\"click\", onClickListener, false);\n\tdivelement.removeEventListener(\"mouseover\", onMouseOverListener, false);\n\tdivelement.removeEventListener(\"mouseout\", onMouseOutListener, false);\n\tdivelement.style.color = \"#A7C4C4\";",
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 159,
            "description": "Reset Event Listeners",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 183,
            "description": "Event Handler for Reset Panel",
            "itemtype": "method",
            "name": "onResetPanel",
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "data/test.js",
            "line": 194,
            "description": "Event Handler for No Trustmarks",
            "itemtype": "method",
            "name": "onNoTrustmarksReceived",
            "params": [
                {
                    "name": "recipient",
                    "description": "website hostname (www.example.com)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "tipevaluator",
            "module": "test"
        },
        {
            "file": "lib/main.js",
            "line": 12,
            "requires": [
                "panelviewer",
                "trustmarkhelper",
                "trustmarkpolicyhelper",
                "sdk/url",
                "sdk/tabs",
                "sdk/self",
                "sdk/indexed-db",
                "sdk/ui/button/toggle"
            ],
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 33,
            "description": "This is the toggle button object",
            "itemtype": "attribute",
            "name": "button",
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 46,
            "description": "Display trustmarks in the panel",
            "itemtype": "method",
            "name": "displayTrustmarkPanel",
            "params": [
                {
                    "name": "state",
                    "description": "togglebutton state",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 64,
            "description": "Get database name",
            "itemtype": "method",
            "name": "getDBName",
            "return": {
                "description": "The name of the trustmark addon database"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 74,
            "description": "Get Recipient Store Name",
            "itemtype": "method",
            "name": "getRecipientStoreName",
            "return": {
                "description": "Recipient object store name."
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 84,
            "description": "Create Recipient Store",
            "itemtype": "method",
            "name": "createRecipientStore",
            "params": [
                {
                    "name": "db",
                    "description": "Pointer to Trustmark database",
                    "type": "IndexedDB object"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 106,
            "description": "Get Trustmark Definition Store name",
            "itemtype": "method",
            "name": "getTrustmarkDefStoreName",
            "return": {
                "description": "Trustmark Definition Store Name"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 116,
            "description": "Create Trustmark Definition Store",
            "itemtype": "method",
            "name": "createTrustmarkDefinitionStore",
            "params": [
                {
                    "name": "db",
                    "description": "Pointer to the trustmark database",
                    "type": "IndexedDB object"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 139,
            "description": "Retrieve Recipient Trustmark Mapping Store Name",
            "itemtype": "method",
            "name": "getRecipientTrustmarkMappingStoreName",
            "return": {
                "description": "Recipient Trustmark Mapping objectStore name"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 149,
            "description": "Create Recipient Trustmark Mapping Store",
            "itemtype": "method",
            "name": "createRecipientTrustmarkMappingStore",
            "params": [
                {
                    "name": "db",
                    "description": "database pointer",
                    "type": "IndexedDB object"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 171,
            "description": "Get trustmark store name",
            "itemtype": "method",
            "name": "getTrustmarkStoreName",
            "return": {
                "description": "Trustmark store name"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 181,
            "description": "Create trustmark object store",
            "itemtype": "method",
            "name": "createTrustmarkStore",
            "params": [
                {
                    "name": "db",
                    "description": "Database pointer",
                    "type": "IndexedDB object"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 203,
            "description": "Get the TIP store name",
            "return": {
                "description": "TIP object store name"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 212,
            "description": "Create TIP Store",
            "params": [
                {
                    "name": "db",
                    "description": "Database pointer",
                    "type": "IndexedDB pointer"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 240,
            "description": "Create all the object stores (tables) required for the trustmark addon",
            "itemtype": "method",
            "name": "createObjectStores",
            "params": [
                {
                    "name": "database_pointer",
                    "description": "-  Database pointer",
                    "type": "IndexedDB object"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 256,
            "description": "Initialize the trustmark database",
            "itemtype": "method",
            "name": "initDB",
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 284,
            "description": "Check if string is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "str",
                    "description": "string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if string is empty"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 296,
            "description": "Load pre-packaged trustmark definition references in cache",
            "itemtype": "method",
            "name": "getDefaultTrustmarkDefs",
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 336,
            "description": "Load pre-packaged trust interoperability profiles",
            "itemtype": "method",
            "name": "getDefaultTIP",
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 381,
            "description": "Read pre packaged trustmarks and load in trustmark database",
            "itemtype": "method",
            "name": "getDefaultTrustmarks",
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/main.js",
            "line": 431,
            "description": "Load Prepackaged data (trustmarks, trust interoperability profiles)",
            "itemtype": "method",
            "name": "loadPrepackagedData",
            "return": {
                "description": "none"
            },
            "class": "main",
            "module": "main"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 17,
            "description": "Utility Function - Check if String is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "str",
                    "description": "string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if blank string"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 33,
            "description": "Get Array of Recipient Trustmarks from List",
            "itemtype": "method",
            "name": "getRecipientTrustmarkArray",
            "params": [
                {
                    "name": "trustmark_list",
                    "description": "##TRUSTMARK## delimited string of trustmark IDs",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of recipient trustmark IDs"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 58,
            "description": "Placeholder - Retrieves the IDs of currently active trustmarks for the recipient",
            "itemtype": "method",
            "name": "getRecipientActiveTrustmarkIDListFromServer",
            "params": [
                {
                    "name": "-",
                    "description": "Recipient_ID - Hostname of the recipient"
                }
            ],
            "return": {
                "description": "- Delimiter separated list of currently active trustmark IDs for recipient"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 90,
            "description": "Get List of inactive trustmarks in Cache",
            "itemtype": "method",
            "name": "getInactiveTrustmarks",
            "params": [
                {
                    "name": "cacheRecipientTrustmarkArray",
                    "description": "Array of recipient trustmark IDs in cache",
                    "type": "String array"
                },
                {
                    "name": "serverRecipientTrustmarkArray",
                    "description": "Array of server trustmark IDs in server",
                    "type": "String array"
                }
            ],
            "return": {
                "description": "Array of inactive trustmarks in Cache"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 130,
            "description": "Get trustmarks that need to be downloaded from server",
            "itemtype": "method",
            "name": "getTrustmarksToBeDownloaded",
            "params": [
                {
                    "name": "cacheRecipientTrustmarkArray",
                    "description": "Array of recipient trustmarks present in cache",
                    "type": "String array"
                },
                {
                    "name": "serverRecipientTrustmarkArray",
                    "description": "Array of server trustmarks present in cache",
                    "type": "String array"
                }
            ],
            "return": {
                "description": "Array of trustmarks to be downloaded"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 168,
            "description": "Update trustmarks in cache",
            "itemtype": "method",
            "name": "updateTrustmarksInCache",
            "params": [
                {
                    "name": "recipient_id",
                    "description": "Site URL (www.facebook.com)",
                    "type": "String"
                },
                {
                    "name": "recipientTrustmarkArrayInServer",
                    "description": "Array of recipient trustmark IDs that are present in cache",
                    "type": "String array"
                },
                {
                    "name": "recipientTrustmarkArrayInCache",
                    "description": "Array of recipient trustmark IDs that are present in server",
                    "type": "String array"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 195,
            "description": "PLACEHOLDER : Download trustmarks from server",
            "itemtype": "method",
            "name": "downloadTrustmarkFromServer",
            "params": [
                {
                    "name": "recipient_id",
                    "description": "Site URL (www.example.com)",
                    "type": "String"
                },
                {
                    "name": "trustmark_id",
                    "description": "Trustmark Identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Trustmark JSON string"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 211,
            "description": "Download Trustmarks From Server",
            "itemtype": "method",
            "name": "downloadTrustmarksFromServer",
            "params": [
                {
                    "name": "recipient_id",
                    "description": "Recipient_id - Site URL (www.example.com)",
                    "type": "String"
                },
                {
                    "name": "trustmarksToBeDownloaded",
                    "description": "Array of trustmark IDs to be downloaded",
                    "type": "String array"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 236,
            "description": "Verifies if Latest Recipient Trustmarks are In Cache",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "recipient_id",
                    "description": "Hostname of the recipient (www.example.com)",
                    "type": "String"
                },
                {
                    "name": "recipientActiveTrustmarkIDsInServer",
                    "description": "Active recipient trustmarks",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/pageloadhandler.js",
            "line": 300,
            "description": "Loads the page with a privacy warning frame",
            "itemtype": "method",
            "name": "onPageLoad",
            "params": [
                {
                    "name": "recipient_id",
                    "description": "website host name (www.example.com)",
                    "type": "String"
                },
                {
                    "name": "trustmarkpanel",
                    "description": "Trustmark addon panel",
                    "type": "Panel object"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "pageloadhandler",
            "module": "pageloadhandler"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 11,
            "requires": [
                "sdk/self",
                "sdk/tabs",
                "sdk/url",
                "trustmarkpolicyhelper",
                "trustmarkhelper",
                "pageloadhandler",
                "sdk/indexed-db"
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 32,
            "description": "This is the trustmark panel object",
            "itemtype": "attribute",
            "name": "trustmarkpanel",
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 52,
            "itemtype": "attribute",
            "name": "Trustmarks Sidebar",
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 73,
            "description": "Get the TIP details given the TIP nickname",
            "itemtype": "event",
            "name": "gettipdetails",
            "params": [
                {
                    "name": "tip_name",
                    "description": "tip name",
                    "type": "String"
                }
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 83,
            "description": "Load trustmark definitions for a granular principle (minimization/transparency...)",
            "itemtype": "event",
            "name": "loadtrustmarkdefs",
            "params": [
                {
                    "name": "tip_type",
                    "description": "Granular principle",
                    "type": "Minimization|transparency|accountability|access|dataquality"
                }
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 93,
            "description": "Upload a user defined policy to the trustmark database",
            "itemtype": "event",
            "name": "policypassed",
            "params": [
                {
                    "name": "-",
                    "description": "policyName  Policy nickname",
                    "type": "String"
                },
                {
                    "name": "-",
                    "description": "policyType  Granular principle",
                    "type": "Minimization|transparency|accountability|access|dataquality"
                },
                {
                    "name": "-",
                    "description": "tip_json - TIP JSON"
                }
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 104,
            "description": "Get all the trust interoperability profiles for a specific granular principle",
            "itemtype": "event",
            "name": "gettips",
            "params": [
                {
                    "name": "policyType",
                    "description": "Granular principle",
                    "type": "Minimization|transparency|accountability|access|dataquality"
                }
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 114,
            "description": "Make the chosen trust interoperability profile (policy) as the currently active",
            "itemtype": "event",
            "name": "applytip",
            "params": [
                {
                    "name": "tip_nickname",
                    "description": "TIP Nickname"
                },
                {
                    "name": "tip_type",
                    "description": "Granular principle",
                    "type": "Minimization|transparency|accountability|access|dataquality"
                }
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 125,
            "description": "Verify if the user entered TIP name is unique, if it's spark the policypassed event",
            "itemtype": "event",
            "name": "checkuniquetipname",
            "params": [
                {
                    "name": "tip_name",
                    "description": "TIP Nickname"
                },
                {
                    "name": "tip_type",
                    "description": "Granular principle",
                    "type": "Minimization|transparency|accountability|access|dataquality"
                },
                {
                    "name": "tip_expr",
                    "description": "TIP trust expression"
                }
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 154,
            "itemtype": "attribute",
            "name": "Settings sidebar",
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 170,
            "description": "Display the trustmarks for the currently active policy for the granular principle specified in the message",
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 198,
            "description": "Displays the trustmark addon panel (privacy report card)",
            "itemtype": "event",
            "name": "show",
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 223,
            "description": "For the currently loaded site, check the passing status for every granular principle",
            "itemtype": "method",
            "name": "iterateThroughTIPs",
            "params": [
                {
                    "name": "recipient_id",
                    "description": "hostname of the currently loaded website",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 253,
            "description": "Toggle Button that displays the trustmark addon panel",
            "itemtype": "attribute",
            "name": "togglebutton",
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 259,
            "description": "Setter for the toggle button attribute",
            "itemtype": "method",
            "name": "setToggleButton",
            "params": [
                {
                    "name": "button",
                    "description": "Toggle button for trustmark panel",
                    "type": "ToggleButton"
                }
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 269,
            "description": "Display the trustmarks in a panel",
            "itemtype": "method",
            "name": "displayTrustmarks",
            "params": [
                {
                    "name": "button",
                    "description": "toggle button",
                    "type": "ToggleButton"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 283,
            "description": "Hide trustmark panel",
            "itemtype": "method",
            "name": "hideTrustmarks",
            "return": {
                "description": "none"
            },
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 293,
            "description": "Check if the loaded website passes the privacy settings for all granular principles",
            "itemtype": "event",
            "name": "activate",
            "params": [
                {
                    "name": "tab",
                    "description": "Browser Tab",
                    "type": "Tab"
                }
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/panelviewer.js",
            "line": 317,
            "description": "Check if the loaded website passes the privacy settings for all granular principles",
            "itemtype": "event",
            "name": "ready",
            "params": [
                {
                    "name": "tab",
                    "description": "Browser Tab",
                    "type": "Tab"
                }
            ],
            "class": "panelviewer",
            "module": "panelviewer"
        },
        {
            "file": "lib/trustmarkhelper.js",
            "line": 14,
            "description": "Load trustmark definitions for a selected granular principle",
            "itemtype": "method",
            "name": "loadTrustmarkDefinitions",
            "params": [
                {
                    "name": "worker",
                    "description": "Settings sidebar",
                    "type": "Worker"
                },
                {
                    "name": "tip_type",
                    "description": "Granular principle",
                    "type": "Minimization|transparency|access|accountability|dataquality"
                }
            ],
            "class": "trustmarkhelper",
            "module": "trustmarkhelper"
        },
        {
            "file": "lib/trustmarkhelper.js",
            "line": 71,
            "description": "Convert trustmark list string from array",
            "itemtype": "method",
            "name": "getTrustmarkList",
            "params": [
                {
                    "name": "trustmark_array",
                    "description": "Array of trustmark identifiers",
                    "type": "String array"
                }
            ],
            "return": {
                "description": "##TRUSTMARK## delimited string of trustmark IDs"
            },
            "class": "trustmarkhelper",
            "module": "trustmarkhelper"
        },
        {
            "file": "lib/trustmarkhelper.js",
            "line": 92,
            "description": "Insert Trustmark Definition in Cache",
            "itemtype": "method",
            "name": "insertTrustmarkDefinitionInCache",
            "params": [
                {
                    "name": "db",
                    "description": "Pointer to trustmark database",
                    "type": "Pointer"
                },
                {
                    "name": "td_identifier",
                    "description": "Trustmark Definition ID",
                    "type": "String"
                },
                {
                    "name": "td_name",
                    "description": "Trustmark Definition Name",
                    "type": "String"
                },
                {
                    "name": "td_desc",
                    "description": "Trustmark Description",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkhelper",
            "module": "trustmarkhelper"
        },
        {
            "file": "lib/trustmarkhelper.js",
            "line": 129,
            "description": "Extract the trustmark recipient name from the Trustmark JSON",
            "itemtype": "method",
            "name": "getRecipientName",
            "params": [
                {
                    "name": "trustmark_json_str",
                    "description": "Trustmark JSON String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "recipient name"
            },
            "class": "trustmarkhelper",
            "module": "trustmarkhelper"
        },
        {
            "file": "lib/trustmarkhelper.js",
            "line": 141,
            "description": "Add Recipient to Cache",
            "itemtype": "method",
            "name": "addRecipientToCache",
            "params": [
                {
                    "name": "db",
                    "description": "indexedDB pointer",
                    "type": "Pointer"
                },
                {
                    "name": "recipient_id",
                    "description": "website",
                    "type": "String"
                },
                {
                    "name": "trustmark_json",
                    "description": "Trustmark JSON string",
                    "type": "JSON string"
                },
                {
                    "name": "overwriteTrustmarkList",
                    "description": "- If true, overwrites the existing trustmark list for a recipient with the new trustmark_id_val"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkhelper",
            "module": "trustmarkhelper"
        },
        {
            "file": "lib/trustmarkhelper.js",
            "line": 193,
            "description": "Delete trustmark from cache",
            "params": [
                {
                    "name": "db",
                    "description": "Pointer to the trustmark database",
                    "type": "Pointer"
                },
                {
                    "name": "trustmark_id_val",
                    "description": "Trustmark ID",
                    "type": "String"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkhelper",
            "module": "trustmarkhelper"
        },
        {
            "file": "lib/trustmarkhelper.js",
            "line": 247,
            "description": "Delete a trustmark recipient mapping from cache",
            "itemtype": "method",
            "name": "deleteTrustmarkMappingFromCache",
            "params": [
                {
                    "name": "db",
                    "description": "Pointer to trustmark database",
                    "type": "Pointer"
                },
                {
                    "name": "trustmark_id_val",
                    "description": "Trustmark ID",
                    "type": "Pointer"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkhelper",
            "module": "trustmarkhelper"
        },
        {
            "file": "lib/trustmarkhelper.js",
            "line": 304,
            "description": "Retrieve trustmarks for a website from the database",
            "itemtype": "method",
            "name": "retrieveRecipientTrustmarks",
            "params": [
                {
                    "name": "recipient_id",
                    "description": "website hostname",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of IDs of the recipient trustmarks"
            },
            "class": "trustmarkhelper",
            "module": "trustmarkhelper"
        },
        {
            "file": "lib/trustmarkhelper.js",
            "line": 380,
            "description": "Add trustmark, trustmark-recipient mapping, recipient to respective object stores in cache",
            "itemtype": "method",
            "name": "addTrustmarkRelationsToCache",
            "params": [
                {
                    "name": "db",
                    "description": "Pointer to the trustmark database",
                    "type": "Pointer"
                },
                {
                    "name": "recipient_id",
                    "description": "ID of the recipient",
                    "type": "String"
                },
                {
                    "name": "trustmark_id",
                    "description": "Trustmark ID",
                    "type": "String"
                },
                {
                    "name": "trustmark_def_id",
                    "description": "Trustmark Definition ID",
                    "type": "String"
                },
                {
                    "name": "trustmark_json",
                    "description": "Trustmark JSON",
                    "type": "JSON string"
                }
            ],
            "class": "trustmarkhelper",
            "module": "trustmarkhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 11,
            "requires": [
                "sdk/indexed-db",
                "chrome",
                "sdk/self",
                "osfile.jsm"
            ],
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 22,
            "description": "For a granular principle type, retrieve the list of applicable TIPS",
            "params": [
                {
                    "name": "tip_type",
                    "description": "Granular Principle",
                    "type": "Minimization|accountability|access|transparency|dataquality"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 76,
            "description": "Check if TIP nickname is unique",
            "itemtype": "method",
            "name": "checkIfTipNameIsUnique",
            "params": [
                {
                    "name": "-",
                    "description": "tip_name - TIP Name"
                },
                {
                    "name": "-",
                    "description": "tip_type - TIP Type"
                },
                {
                    "name": "-",
                    "description": "tip_expr - TIP Trust Expression"
                }
            ],
            "return": {
                "description": "- Emits uniquetipname/duplicatetipname messages"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 125,
            "description": "Applies custom defined user policy as the current privacy setting for the selected granular principle",
            "itemtype": "method",
            "name": "applyUserPolicy",
            "params": [
                {
                    "name": "tip_nickname",
                    "description": "TIP Custom Name",
                    "type": "String"
                },
                {
                    "name": "tip_type",
                    "description": "TIP Type",
                    "type": "Minimization|accountability|access|transparency|dataquality"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 190,
            "description": "Reset all policies to default",
            "itemtype": "method",
            "name": "resetPolicy",
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 211,
            "description": "Upload user defined policy string to the database",
            "itemtype": "method",
            "name": "uploadUserPolicy2",
            "params": [
                {
                    "name": "tip_json_str",
                    "description": "TIP JSON",
                    "type": "JSON string"
                },
                {
                    "name": "tip_nickname",
                    "description": "TIP Nickname",
                    "type": "String"
                },
                {
                    "name": "tip_type",
                    "description": "Granular Principle",
                    "type": "Minimization|accountability|access|transparency|dataquality"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 242,
            "description": "Utility method - Check if string is empty",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "str",
                    "description": "string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if string is empty"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 254,
            "description": "From a ##TRUSTMARK## delimited trustmark set, get the set of recipient trustmark IDs",
            "itemtype": "method",
            "name": "getRecipientTrustmarkSet",
            "params": [
                {
                    "name": "trustmark_list",
                    "description": "##TRUSTMARK## delimited string of trustmark IDs",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Set of Trustmark IDs"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 276,
            "description": "Get TIP JSON string for trustmark list",
            "itemtype": "method",
            "name": "getTIPTrustmarkJSONString",
            "params": [
                {
                    "name": "trustmark_list",
                    "description": "Trustmark in JSON string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Trustmarks that map to a TIP in JSON format"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 291,
            "description": "Placeholder: Check if Recipient trustmarks satisfy TIP",
            "itemtype": "method",
            "name": "doesRecipientSatisfyPolicyWebAPICheck",
            "params": [
                {
                    "name": "recipient_id",
                    "description": "Site hostname (www.facebook.com)",
                    "type": "String"
                },
                {
                    "name": "tip_json",
                    "description": "TIP JSON"
                }
            ],
            "return": {
                "description": "TRUE if recipient satisfies policy"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 305,
            "description": "Evaluate trustmark conditional expression for a TIP given recipient trustmarks",
            "itemtype": "method",
            "name": "evaluateTrustmarkExpression",
            "params": [
                {
                    "name": "trust_expression",
                    "description": "Conditional expression of trustmark IDs that must be satisified for the TIP to pass",
                    "type": "Boolean String"
                },
                {
                    "name": "trustmark_list",
                    "description": "##TRUSTMARK## delimited Trustmark ID string for recipient",
                    "type": "String"
                }
            ],
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 342,
            "description": "Check If the Recipient satisfies all the currently applied TIPs for all of the 5 granular principles",
            "itemtype": "method",
            "name": "checkIfRecipientSatisfiesAllActiveTIPs",
            "params": [
                {
                    "name": "recipient_id",
                    "description": "website hostname (www.example.com)",
                    "type": "String"
                },
                {
                    "name": "button",
                    "description": "toggle button to change the privacy status icon",
                    "type": "ToggleButton"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 434,
            "description": "Check if the recipient satisfies a specific tip. Triggers passedtip/failedtip events",
            "itemtype": "method",
            "name": "checkIfRecipientSatisfiesPolicy",
            "params": [
                {
                    "name": "db",
                    "description": "Pointer to the trustmark database",
                    "type": "IndexedDB pointer"
                },
                {
                    "name": "recipient_id",
                    "description": "hostname of the website (www.example.com)",
                    "type": "String"
                },
                {
                    "name": "tip_type",
                    "description": "Granular Principle",
                    "type": "Minimization|access|accountability|transparency|dataquality"
                },
                {
                    "name": "trustmarkpanel",
                    "description": "Trustmark Panel",
                    "type": "Panel object"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 522,
            "description": "Extract TIP trust expression from TIP JSON",
            "itemtype": "method",
            "name": "getTIPTrustExpression",
            "params": [
                {
                    "name": "tip_json",
                    "description": "TIP JSON",
                    "type": "JSON string"
                }
            ],
            "return": {
                "description": "Trust expression for the TIP"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 536,
            "description": "Send the tip trust expression (textual format) and tip type to settings. Triggers 'receivetipdetails' event",
            "itemtype": "method",
            "name": "getTIPExpressionText",
            "params": [
                {
                    "name": "tip_name",
                    "description": "TIP Nickname",
                    "type": "String"
                },
                {
                    "name": "worker",
                    "description": "settings sidebar worker",
                    "type": "Sidebar eventhandler"
                }
            ],
            "return": {
                "description": "Emits receivetipdetails message with tip type and trust expression"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 603,
            "description": "Get trustmark definition ID list referenced by a TIP",
            "itemtype": "method",
            "name": "getTrustmarkList",
            "params": [
                {
                    "name": "tip_json",
                    "description": "TIP JSON",
                    "type": "JSON string"
                }
            ],
            "return": {
                "description": "Trustmark Definition IDs list separated by ##TRUSTMARK##"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 636,
            "description": "Update TIP trustmark expression with referenced TIP's trust expression",
            "itemtype": "method",
            "name": "updateExpression",
            "params": [
                {
                    "name": "existing_condition",
                    "description": "Current trust expression for TIP",
                    "type": "Boolean expression"
                },
                {
                    "name": "referenced_tip_id",
                    "description": "Referenced TIP Identifier",
                    "type": "String"
                },
                {
                    "name": "referenced_tip_condition",
                    "description": "Referenced TIP Trust expression",
                    "type": "Boolean expression"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 651,
            "description": "Identify type of TIP from its ID \nCan be replaced by a call back to the tip store to get the TIP type",
            "itemtype": "method",
            "name": "getTipType",
            "params": [
                {
                    "name": "tip_id",
                    "description": "TIP Identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "tip_type  Granular Principle",
                "type": "Minimization|accountability|access|dataquality|transparency)"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 675,
            "description": "Get the default tip nickname for a tip",
            "itemtype": "method",
            "name": "getTIPNickname",
            "params": [
                {
                    "name": "policy_type",
                    "description": "Granular Principle",
                    "type": "Minimization|accountability|access|dataquality|transparency"
                }
            ],
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 686,
            "description": "Add the TIP details (trustmark list,active ..etc) to TIP row",
            "itemtype": "method",
            "name": "addTIPDetailsToTIP",
            "params": [
                {
                    "name": "tipObjectStore",
                    "description": "TIP Object Store",
                    "type": "IndexedDB store"
                },
                {
                    "name": "tip_id",
                    "description": "TIP Identifier",
                    "type": "String"
                },
                {
                    "name": "tip_json",
                    "description": "TIP JSON",
                    "type": "JSON String"
                },
                {
                    "name": "tip_type",
                    "description": "Granular Principle",
                    "type": "Minimization|access|accountability|transparency|dataquality"
                },
                {
                    "name": "tip_nickname",
                    "description": "TIP Nickname",
                    "type": "String"
                },
                {
                    "name": "isActive",
                    "description": "is TIP Currently Applied",
                    "type": "1/0"
                },
                {
                    "name": "trustmark",
                    "description": "Trustmark Definition List that will be appended to TIP's trustmark definition list",
                    "type": "String"
                },
                {
                    "name": "trustexpression",
                    "description": "Trust Expression of the TIP (new insert) or Referenced TIP for Update",
                    "type": "String"
                },
                {
                    "name": "tipreferencearray",
                    "description": "Array of TIP IDs referred by the TIP",
                    "type": "String array"
                },
                {
                    "name": "currentindex",
                    "description": "Index of currently referred TIP in tipreferencearray whose trustmarks will be appended to TIP's trustmark list in the next call",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 793,
            "description": "Append trustmark definitions to TIP's trustmark definition listrecursively from referenced tips",
            "itemtype": "method",
            "name": "appendTrustmarksRecursively",
            "params": [
                {
                    "name": "tipreferencearray",
                    "description": "TIP Reference array",
                    "type": "String array"
                },
                {
                    "name": "currentindex",
                    "description": "Index of the referenced tip among list of referenced tips",
                    "type": "Integer"
                },
                {
                    "name": "tip_json",
                    "description": "JSON string of the TIP",
                    "type": "JSON string"
                },
                {
                    "name": "tip_type",
                    "description": "Granular Principle",
                    "type": "Minimization|access|accountability|transparency|dataquality"
                },
                {
                    "name": "tip_nickname",
                    "description": "TIP Nickname",
                    "type": "String"
                },
                {
                    "name": "isActive",
                    "description": "Is TIP currently applied",
                    "type": "1/0"
                },
                {
                    "name": "TIPObjectStore",
                    "description": "TIP Object Store",
                    "type": "IndexedDB object store"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 843,
            "description": "Insert TIP in Cache",
            "itemtype": "method",
            "name": "insertTIPInCache",
            "params": [
                {
                    "name": "db",
                    "description": "Database pointer",
                    "type": "IndexedDB pointer"
                },
                {
                    "name": "tip_id",
                    "description": "TIP Identifier",
                    "type": "IndexedDB pointer"
                },
                {
                    "name": "tip_json",
                    "description": "TIP JSON",
                    "type": "JSON string"
                },
                {
                    "name": "tip_type",
                    "description": "Specific granular principle",
                    "type": "Minimization|transparency|accountability|access|dataquality"
                },
                {
                    "name": "tip_nickname",
                    "description": "TIP Nickname",
                    "type": "String"
                },
                {
                    "name": "isActive",
                    "description": "Is TIP Active",
                    "type": "1/0"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 864,
            "description": "Display the trustmarks for a recipient and TIP\nEmits the 'trustmark' event",
            "itemtype": "method",
            "name": "displayTIPTrustmarks",
            "params": [
                {
                    "name": "tip_key",
                    "description": "TIP Identifier",
                    "type": "String"
                },
                {
                    "name": "recipient_id",
                    "description": "hostname of the recipient website",
                    "type": "String"
                },
                {
                    "name": "worker",
                    "description": "panel eventhandler and transmitter",
                    "type": "Panel object"
                }
            ],
            "return": {
                "description": "none"
            },
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 945,
            "description": "Displays the trustmarks passed/failed for a currently active policy for a specified granular principle",
            "itemtype": "method",
            "name": "displayTrustmarksForCurrentlyActivePolicy",
            "params": [
                {
                    "name": "tip_type",
                    "description": "Granular Principle",
                    "type": "Minimization|access|accountability|transparency|dataquality"
                },
                {
                    "name": "recipient_id",
                    "description": "website host name (www.example.com}",
                    "type": "String"
                },
                {
                    "name": "worker",
                    "description": "panel event handler/trigger",
                    "type": "Panel object"
                }
            ],
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkpolicyhelper.js",
            "line": 1053,
            "description": "NOTES\n 1. Not handling TIP/Trustmark Updation over time\n 2. Assumption - TIP JSON has been modified to put Trustmarks and Referenced TIPs in an array (for JSON parsing to succeed)\n 3. Assumption - TIP JSON Trustexpression directly has Identifiers instead of idrefs\n 4. Assumption - If TIP is not present in pre-packaged, currently we don't support it. But it could get it from trustmark registry server.\n 5. Assumption - If a TIP references Trustmarks that are not present in the cache, it is retrieved from Trustmark Registry Server\n 6. Trustmark Definition updation is not handled right now",
            "class": "trustmarkpolicyhelper",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkverifier.js",
            "line": 1,
            "description": "Filename: trustmarkverifier.js\nPurpose: Verifies the digital signature on the trustmark XML\nCreated By: ARao",
            "class": "",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkverifier.js",
            "line": 8,
            "description": "Retrieves the Trustmark Registry Server Signing Certificate",
            "class": "",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkverifier.js",
            "line": 16,
            "description": "Verify the digital signature of the trustmark\nParams: trustmark_xml - Trustmark XML\n\t   server_certificate - Server Certificate",
            "class": "",
            "module": "trustmarkpolicyhelper"
        },
        {
            "file": "lib/trustmarkverifier.js",
            "line": 26,
            "description": "Verify if the trustmark is valid",
            "class": "",
            "module": "trustmarkpolicyhelper"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " lib/pageloadhandler.js:58"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/pageloadhandler.js:58"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/trustmarkpolicyhelper.js:76"
        },
        {
            "message": "Missing item type\n{\n\tdivelement.removeEventListener(\"click\", onClickListener, false);\n\tdivelement.removeEventListener(\"mouseover\", onMouseOverListener, false);\n\tdivelement.removeEventListener(\"mouseout\", onMouseOutListener, false);\n\tdivelement.style.color = \"#A7C4C4\";",
            "line": " data/test.js:147"
        },
        {
            "message": "Missing item type",
            "line": " lib/main.js:12"
        },
        {
            "message": "Missing item type\nGet the TIP store name",
            "line": " lib/main.js:203"
        },
        {
            "message": "Missing item type\nCreate TIP Store",
            "line": " lib/main.js:212"
        },
        {
            "message": "Missing item type",
            "line": " lib/panelviewer.js:11"
        },
        {
            "message": "Missing item type\nDisplay the trustmarks for the currently active policy for the granular principle specified in the message",
            "line": " lib/panelviewer.js:170"
        },
        {
            "message": "Missing item type\nDelete trustmark from cache",
            "line": " lib/trustmarkhelper.js:193"
        },
        {
            "message": "Missing item type",
            "line": " lib/trustmarkpolicyhelper.js:11"
        },
        {
            "message": "Missing item type\nFor a granular principle type, retrieve the list of applicable TIPS",
            "line": " lib/trustmarkpolicyhelper.js:22"
        },
        {
            "message": "Missing item type\nNOTES\n 1. Not handling TIP/Trustmark Updation over time\n 2. Assumption - TIP JSON has been modified to put Trustmarks and Referenced TIPs in an array (for JSON parsing to succeed)\n 3. Assumption - TIP JSON Trustexpression directly has Identifiers instead of idrefs\n 4. Assumption - If TIP is not present in pre-packaged, currently we don't support it. But it could get it from trustmark registry server.\n 5. Assumption - If a TIP references Trustmarks that are not present in the cache, it is retrieved from Trustmark Registry Server\n 6. Trustmark Definition updation is not handled right now",
            "line": " lib/trustmarkpolicyhelper.js:1053"
        },
        {
            "message": "Missing item type\nFilename: trustmarkverifier.js\nPurpose: Verifies the digital signature on the trustmark XML\nCreated By: ARao",
            "line": " lib/trustmarkverifier.js:1"
        },
        {
            "message": "Missing item type\nRetrieves the Trustmark Registry Server Signing Certificate",
            "line": " lib/trustmarkverifier.js:8"
        },
        {
            "message": "Missing item type\nVerify the digital signature of the trustmark\nParams: trustmark_xml - Trustmark XML\n\t   server_certificate - Server Certificate",
            "line": " lib/trustmarkverifier.js:16"
        },
        {
            "message": "Missing item type\nVerify if the trustmark is valid",
            "line": " lib/trustmarkverifier.js:26"
        }
    ]
}