/**
 * File: pageloader.js
 * Purpose: Displays page warnings upon page load and activates policy
 * Created by: ARao
 */

var urls = require("sdk/url");
var tabs = require("sdk/tabs");
var self = require("sdk/self");
var { indexedDB }  = require('sdk/indexed-db');
var trustmarkhelper = require("./trustmarkhelper.js");

function printTrustmarkList(trustmarkarray)
{
	console.log("Trustmark array: " + trustmarkarray);
}

tabs.on('activate', function(tab) {
	console.log('tab is active', tab.url);
	onPageLoad(tab.url);

});

tabs.on('ready', function(tab)
{
	console.log('tab is loaded', tab.title, tab.url);
	
	if(tab === tabs.activeTab)
	{
		console.log("Im the active tab" + tab.url);
		onPageLoad(tab.url);
	}
	else
	{
		console.log("I'm not active" + tab.url);
	}
});

function isEmpty(str)
{
	if(str && str.length > 0)
	{
		return false;
	}

	return true;
}

function getRecipientTrustmarkArray(trustmark_list)
{
	var trustmark_array = trustmark_list.split("##TRUSTMARK##");
	var trustmark_final_array = [];

	for(var index = 0; index < trustmark_array.length; index++)
	{
		var trustmark_id = trustmark_array[index];

		if(!isEmpty(trustmark_id))
		{
				trustmark_final_array.push(trustmark_id);
		}	
		
	}

        return trustmark_final_array;
}

/***
 *@Purpose - Placeholder - Retrieves the IDs of currently active trustmarks for the recipient
 *@Params - Recipient_ID - Hostname of the recipient
 *@Returns - Delimiter separated list of currently active trustmark IDs for recipient
 */
function getRecipientActiveTrustmarkIDListFromServer(recipient_id)
{
	//TODO: Insert web service here to contact the trustmark server
	return "";
}

/***
 *
 */
function getInactiveTrustmarks(cacheRecipientTrustmarkArray, serverRecipientTrustmarkArray)
{
   var inactiveTrustmarks = [];

    for(var index = 0; index < cacheRecipientTrustmarkArray.length; index++)
    {
	var cacheTrustmark = cacheRecipientTrustmarkArray[index];
	var found = false;

	for(var index2 = 0; index2 < serverRecipientTrustmarkArray.length; index2++)
	{
	    var serverTrustmark = serverRecipientTrustmarkArray[index2];
	    
	    if(cacheTrustmark === serverTrustmark)
	    {
		found = true;
	    }
	}

	if(!found)
	{
		inactiveTrustmarks.push(cacheTrustmark);
	}

    }

    return inactiveTrustmarks;	

}

function getTrustmarksToBeDownloaded(cacheRecipientTrustmarkArray, serverRecipientTrustmarkArray)
{

   var trustmarksToDownload = [];

    for(var index = 0; index < serverRecipientTrustmarkArray.length; index++)
    {
	var serverTrustmark = serverRecipientTrustmarkArray[index];
	var found = false;

	for(var index2 = 0; index2 < cacheRecipientTrustmarkArray.length; index2++)
	{
	    var cacheTrustmark = cacheRecipientTrustmarkArray[index2];
	    
	    if(cacheTrustmark === serverTrustmark)
	    {
		found = true;
	    }
	}

	if(!found)
	{
		trustmarksToDownload.push(serverTrustmark);
	}

    }

    return trustmarksToDownload;	


}

function verifyIfLatestRecipientTrustmarksAreInCache(recipient_id, recipientActiveTrustmarkIDsInServer)
{
	//1. Checks if recipient exists in the cache
	var dbRequest  = indexedDB.open("trustmarkDB", 2);
	var db;

	dbRequest.onsuccess = function(event)
	{
		db = event.target.result;

		var recipientObjectStore = db.transaction("recipients", "readwrite").objectStore("recipients");
		var recipientRequest = recipientObjectStore.get(recipient_id);

		recipientRequest.onsuccess = function(event)
		{

			var activeTrustmarks = false;
			var recipientRow = event.target.result;

			if(recipientRow)
			{
				var trustmark_list = recipientRow.trustmark_list;
				var recipientTrustmarkArrayInCache = getRecipientTrustmarkArray(trustmark_list);
				//HACK: As there is no server at the moment, I'm copying trustmark_array to the recipientActiveTrustmarkArray
                                //ELSE: This should be written as
				//var recipientTrustmarkArrayInServer = getArray(recipientActiveTrustmarkIDsInServer);

				var recipientTrustmarkArrayInServer = trustmark_array;

				var inactivetrustmarks = getInactiveTrustmarks(recipientTrustmarkArrayInCache, recipientTrustmarkArrayInServer);				
				var trustmarksToBeDownloaded = getTrustmarksToBeDownloaded(recipientTrustmarkArrayInCache, recipientTrustmarkArrayInServer);

				//TODO: For inactive trustmarks, delete them from cache
				//TODO: For trustmarksToBeDownloaded, send them for download								 	
				 			
			}
			else
			{

				//TODO: downloadTrustmarksFromServer(recipientActiveTrustmarkIDsInServer);
	
			}

	
		}

	}

}

/**
 * Loads the page with a privacy warning frame 
 */
function onPageLoad(recipient_id)
{

	var recipientActiveTrustmarkIDs = getRecipientActiveTrustmarkIDListFromServer(recipient_id);
	verifyIfRecipientTrustmarksAreLatest(recipientActiveTrustmarkIDs,recipient_id);


	console.log("page load");
}

exports.onPageLoad = onPageLoad;
exports.printTrustmarkList = printTrustmarkList;
